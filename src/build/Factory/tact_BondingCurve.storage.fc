;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

_ $StateInit$_get_code((cell, cell) v) inline {
    var (v'code, v'data) = v;
    return v'code;
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline {
    return ($bounce, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice $to, int $value, int $bounce, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return (true, $to, $value, $mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline {
    return ($bounce, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return (true, $to, $value, $mode, $body, null(), null());
}

;;
;; Type: JettonData
;; TLB: _ total_supply:int257 mintable:bool owner:address content:^cell wallet_code:^cell = JettonData
;;

tuple $JettonData$_to_tuple(((int, int, slice, cell, cell)) v) inline {
    var (v'total_supply, v'mintable, v'owner, v'content, v'wallet_code) = v;
    return __tact_tuple_create_5(v'total_supply, v'mintable, v'owner, v'content, v'wallet_code);
}

tuple $JettonData$_to_external(((int, int, slice, cell, cell)) v) inline {
    var (v'total_supply, v'mintable, v'owner, v'content, v'wallet_code) = v; 
    return $JettonData$_to_tuple(v'total_supply, v'mintable, v'owner, v'content, v'wallet_code);
}

((int, int, slice, cell, cell)) $JettonData$_constructor_total_supply_mintable_owner_content_wallet_code(int $total_supply, int $mintable, slice $owner, cell $content, cell $wallet_code) inline {
    return ($total_supply, $mintable, $owner, $content, $wallet_code);
}

;;
;; Type: TokenTransfer
;; Header: 0x0f8a7ea5
;; TLB: token_transfer#0f8a7ea5 query_id:uint64 amount:coins destination:address response_destination:Maybe address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = TokenTransfer
;;

builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address_opt(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $TokenTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int $query_id, int $amount, slice $destination, slice $response_destination, cell $custom_payload, int $forward_ton_amount, slice $forward_payload) inline {
    return ($query_id, $amount, $destination, $response_destination, $custom_payload, $forward_ton_amount, $forward_payload);
}

;;
;; Type: TokenTransferInternal
;; Header: 0x178d4519
;; TLB: token_transfer_internal#178d4519 query_id:uint64 amount:coins from:address response_destination:Maybe address forward_ton_amount:coins forward_payload:remainder<slice> = TokenTransferInternal
;;

builder $TokenTransferInternal$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'from, v'response_destination, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = __tact_store_address_opt(build_0, v'response_destination);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $TokenTransferInternal$_store_cell((int, int, slice, slice, int, slice) v) inline {
    return $TokenTransferInternal$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, int, slice)) $TokenTransferInternal$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload(int $query_id, int $amount, slice $from, slice $response_destination, int $forward_ton_amount, slice $forward_payload) inline {
    return ($query_id, $amount, $from, $response_destination, $forward_ton_amount, $forward_payload);
}

;;
;; Type: TokenNotification
;; Header: 0x7362d09c
;; TLB: token_notification#7362d09c query_id:uint64 amount:coins from:address forward_payload:remainder<slice> = TokenNotification
;;

(slice, ((int, int, slice, slice))) $TokenNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1935855772);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'from = sc_0~__tact_load_address();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'amount, v'from, v'forward_payload));
}

;;
;; Type: TokenBurnNotification
;; Header: 0x7bdd97de
;; TLB: token_burn_notification#7bdd97de query_id:uint64 amount:coins sender:address response_destination:Maybe address = TokenBurnNotification
;;

(slice, ((int, int, slice, slice))) $TokenBurnNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2078119902);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'sender = sc_0~__tact_load_address();
    var v'response_destination = sc_0~__tact_load_address_opt();
    return (sc_0, (v'query_id, v'amount, v'sender, v'response_destination));
}

;;
;; Type: TokenExcesses
;; Header: 0xd53276db
;; TLB: token_excesses#d53276db query_id:uint64 = TokenExcesses
;;

builder $TokenExcesses$_store(builder build_0, (int) v) inline {
    var (v'query_id) = v;
    build_0 = store_uint(build_0, 3576854235, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    return build_0;
}

cell $TokenExcesses$_store_cell((int) v) inline {
    return $TokenExcesses$_store(begin_cell(), v).end_cell();
}

((int)) $TokenExcesses$_constructor_query_id(int $query_id) inline {
    return ($query_id);
}

;;
;; Type: Mint
;; Header: 0x89a35a1f
;; TLB: mint#89a35a1f  = Mint
;;

(slice, (tuple)) $Mint$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2309184031);
    return (sc_0, null());
}

;;
;; Type: ProvideWalletAddress
;; Header: 0x2c76b973
;; TLB: provide_wallet_address#2c76b973 query_id:uint64 owner_address:address include_address:bool = ProvideWalletAddress
;;

(slice, ((int, slice, int))) $ProvideWalletAddress$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 745978227);
    var v'query_id = sc_0~load_uint(64);
    var v'owner_address = sc_0~__tact_load_address();
    var v'include_address = sc_0~load_int(1);
    return (sc_0, (v'query_id, v'owner_address, v'include_address));
}

;;
;; Type: TakeWalletAddress
;; Header: 0xd1735400
;; TLB: take_wallet_address#d1735400 query_id:uint64 wallet_address:address owner_address:remainder<slice> = TakeWalletAddress
;;

builder $TakeWalletAddress$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'query_id, v'wallet_address, v'owner_address) = v;
    build_0 = store_uint(build_0, 3513996288, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = __tact_store_address(build_0, v'wallet_address);
    build_0 = build_0.store_slice(v'owner_address);
    return build_0;
}

cell $TakeWalletAddress$_store_cell((int, slice, slice) v) inline {
    return $TakeWalletAddress$_store(begin_cell(), v).end_cell();
}

((int, slice, slice)) $TakeWalletAddress$_constructor_query_id_wallet_address_owner_address(int $query_id, slice $wallet_address, slice $owner_address) inline {
    return ($query_id, $wallet_address, $owner_address);
}

;;
;; Type: Buy
;; Header: 0xacf8a4e6
;; TLB: buy#acf8a4e6 tonAmount:int257 minOut:int257 referrer:address referrerDl1:address referrerDl2:address treasury:address trader:address = Buy
;;

(slice, ((int, int, slice, slice, slice, slice, slice))) $Buy$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2901976294);
    var v'tonAmount = sc_0~load_int(257);
    var v'minOut = sc_0~load_int(257);
    var v'referrer = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'referrerDl1 = sc_1~__tact_load_address();
    var v'referrerDl2 = sc_1~__tact_load_address();
    var v'treasury = sc_1~__tact_load_address();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'trader = sc_2~__tact_load_address();
    return (sc_0, (v'tonAmount, v'minOut, v'referrer, v'referrerDl1, v'referrerDl2, v'treasury, v'trader));
}

;;
;; Type: Sell
;; Header: 0x3b6b4526
;; TLB: sell#3b6b4526 referrerDl1:address referrerDl2:address treasury:address trader:address jettonAmount:int257 minTonOut:int257 referrer:address = Sell
;;

(slice, ((slice, slice, slice, slice, int, int, slice))) $Sell$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 996885798);
    var v'referrerDl1 = sc_0~__tact_load_address();
    var v'referrerDl2 = sc_0~__tact_load_address();
    var v'treasury = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'trader = sc_1~__tact_load_address();
    var v'jettonAmount = sc_1~load_int(257);
    var v'minTonOut = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'referrer = sc_2~__tact_load_address();
    return (sc_0, (v'referrerDl1, v'referrerDl2, v'treasury, v'trader, v'jettonAmount, v'minTonOut, v'referrer));
}

;;
;; Type: ClaimToken
;; Header: 0xcd88c7c0
;; TLB: claim_token#cd88c7c0 owner:address = ClaimToken
;;

(slice, ((slice))) $ClaimToken$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3448293312);
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

;;
;; Type: CompleteEvent
;; Header: 0x3d7dc901
;; TLB: complete_event#3d7dc901 jetton:address = CompleteEvent
;;

builder $CompleteEvent$_store(builder build_0, (slice) v) inline {
    var (v'jetton) = v;
    build_0 = store_uint(build_0, 1031653633, 32);
    build_0 = __tact_store_address(build_0, v'jetton);
    return build_0;
}

cell $CompleteEvent$_store_cell((slice) v) inline {
    return $CompleteEvent$_store(begin_cell(), v).end_cell();
}

((slice)) $CompleteEvent$_constructor_jetton(slice $jetton) inline {
    return ($jetton);
}

;;
;; Type: TradeEvent
;; Header: 0x71726d89
;; TLB: trade_event#71726d89 tonAmount:int257 jettonAmount:int257 jetton:address virtualTonReserve:int257 virtualTokenReserve:int257 trader:address isBuy:bool balance:int257 = TradeEvent
;;

builder $TradeEvent$_store(builder build_0, (int, int, slice, int, int, slice, int, int) v) inline_ref {
    var (v'tonAmount, v'jettonAmount, v'jetton, v'virtualTonReserve, v'virtualTokenReserve, v'trader, v'isBuy, v'balance) = v;
    build_0 = store_uint(build_0, 1903324553, 32);
    build_0 = build_0.store_int(v'tonAmount, 257);
    build_0 = build_0.store_int(v'jettonAmount, 257);
    build_0 = __tact_store_address(build_0, v'jetton);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'virtualTonReserve, 257);
    build_1 = build_1.store_int(v'virtualTokenReserve, 257);
    build_1 = __tact_store_address(build_1, v'trader);
    build_1 = build_1.store_int(v'isBuy, 1);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'balance, 257);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $TradeEvent$_store_cell((int, int, slice, int, int, slice, int, int) v) inline {
    return $TradeEvent$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int, int, slice, int, int)) $TradeEvent$_constructor_tonAmount_jettonAmount_jetton_virtualTonReserve_virtualTokenReserve_trader_isBuy_balance(int $tonAmount, int $jettonAmount, slice $jetton, int $virtualTonReserve, int $virtualTokenReserve, slice $trader, int $isBuy, int $balance) inline {
    return ($tonAmount, $jettonAmount, $jetton, $virtualTonReserve, $virtualTokenReserve, $trader, $isBuy, $balance);
}

;;
;; Type: ClaimEvent
;; Header: 0x8e8a0c23
;; TLB: claim_event#8e8a0c23 jetton:address user:address balance:int257 = ClaimEvent
;;

builder $ClaimEvent$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'jetton, v'user, v'balance) = v;
    build_0 = store_uint(build_0, 2391411747, 32);
    build_0 = __tact_store_address(build_0, v'jetton);
    build_0 = __tact_store_address(build_0, v'user);
    build_0 = build_0.store_int(v'balance, 257);
    return build_0;
}

cell $ClaimEvent$_store_cell((slice, slice, int) v) inline {
    return $ClaimEvent$_store(begin_cell(), v).end_cell();
}

((slice, slice, int)) $ClaimEvent$_constructor_jetton_user_balance(slice $jetton, slice $user, int $balance) inline {
    return ($jetton, $user, $balance);
}

;;
;; Type: BondingCurveData
;; TLB: _ virtualTonReserve:int257 virtualTokenReserve:int257 complete:bool liquidityAdded:bool jettonCreator:address tokenDebt:int257 myJettonWalletAddress:address = BondingCurveData
;;

tuple $BondingCurveData$_to_tuple(((int, int, int, int, slice, int, slice)) v) inline {
    var (v'virtualTonReserve, v'virtualTokenReserve, v'complete, v'liquidityAdded, v'jettonCreator, v'tokenDebt, v'myJettonWalletAddress) = v;
    return __tact_tuple_create_7(v'virtualTonReserve, v'virtualTokenReserve, v'complete, v'liquidityAdded, v'jettonCreator, v'tokenDebt, v'myJettonWalletAddress);
}

tuple $BondingCurveData$_to_external(((int, int, int, int, slice, int, slice)) v) inline {
    var (v'virtualTonReserve, v'virtualTokenReserve, v'complete, v'liquidityAdded, v'jettonCreator, v'tokenDebt, v'myJettonWalletAddress) = v; 
    return $BondingCurveData$_to_tuple(v'virtualTonReserve, v'virtualTokenReserve, v'complete, v'liquidityAdded, v'jettonCreator, v'tokenDebt, v'myJettonWalletAddress);
}

((int, int, int, int, slice, int, slice)) $BondingCurveData$_constructor_virtualTonReserve_virtualTokenReserve_complete_liquidityAdded_jettonCreator_tokenDebt_myJettonWalletAddress(int $virtualTonReserve, int $virtualTokenReserve, int $complete, int $liquidityAdded, slice $jettonCreator, int $tokenDebt, slice $myJettonWalletAddress) inline {
    return ($virtualTonReserve, $virtualTokenReserve, $complete, $liquidityAdded, $jettonCreator, $tokenDebt, $myJettonWalletAddress);
}

;;
;; Type: OutputTokenAmountReturn
;; TLB: _ amountOut:int257 tax:int257 remainNativeAmount:int257 = OutputTokenAmountReturn
;;

tuple $OutputTokenAmountReturn$_to_tuple(((int, int, int)) v) inline {
    var (v'amountOut, v'tax, v'remainNativeAmount) = v;
    return __tact_tuple_create_3(v'amountOut, v'tax, v'remainNativeAmount);
}

tuple $OutputTokenAmountReturn$_to_external(((int, int, int)) v) inline {
    var (v'amountOut, v'tax, v'remainNativeAmount) = v; 
    return $OutputTokenAmountReturn$_to_tuple(v'amountOut, v'tax, v'remainNativeAmount);
}

((int, int, int)) $OutputTokenAmountReturn$_constructor_amountOut_tax_remainNativeAmount(int $amountOut, int $tax, int $remainNativeAmount) inline {
    return ($amountOut, $tax, $remainNativeAmount);
}

;;
;; Type: OutputTonAmountReturn
;; TLB: _ amountOut:int257 tax:int257 = OutputTonAmountReturn
;;

tuple $OutputTonAmountReturn$_to_tuple(((int, int)) v) inline {
    var (v'amountOut, v'tax) = v;
    return __tact_tuple_create_2(v'amountOut, v'tax);
}

tuple $OutputTonAmountReturn$_to_external(((int, int)) v) inline {
    var (v'amountOut, v'tax) = v; 
    return $OutputTonAmountReturn$_to_tuple(v'amountOut, v'tax);
}

((int, int)) $OutputTonAmountReturn$_constructor_amountOut_tax(int $amountOut, int $tax) inline {
    return ($amountOut, $tax);
}

;;
;; Type: JettonDefaultWallet
;;

builder $JettonDefaultWallet$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'master, v'owner) = v;
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

(cell, cell) $JettonDefaultWallet$_init_child(cell sys', slice $master, slice $owner) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: JettonDefaultWallet
    cell mine = __tact_dict_get_code(source, 55471);
    contracts = __tact_dict_set_code(contracts, 55471, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $JettonDefaultWallet$init$_store(b, ($master, $owner));
    return (mine, b.end_cell());
}

;;
;; Type: BondingCurve
;;

builder $BondingCurve$_store(builder build_0, (int, slice, cell, int, int, cell, int, int, int, int, slice, slice, int, slice) v) inline {
    var (v'total_supply, v'owner, v'content, v'mintable, v'max_supply, v'balances, v'virtualTonReserve, v'virtualTokenReserve, v'complete, v'liquidityAdded, v'factory, v'jettonCreator, v'tokenDebt, v'myJettonWalletAddress) = v;
    build_0 = build_0.store_coins(v'total_supply);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'content);
    build_0 = build_0.store_int(v'mintable, 1);
    build_0 = build_0.store_coins(v'max_supply);
    var build_1 = begin_cell();
    build_1 = build_1.store_dict(v'balances);
    build_1 = build_1.store_int(v'virtualTonReserve, 257);
    build_1 = build_1.store_int(v'virtualTokenReserve, 257);
    build_1 = build_1.store_int(v'complete, 1);
    build_1 = build_1.store_int(v'liquidityAdded, 1);
    build_1 = __tact_store_address(build_1, v'factory);
    var build_2 = begin_cell();
    build_2 = __tact_store_address(build_2, v'jettonCreator);
    build_2 = build_2.store_int(v'tokenDebt, 257);
    build_2 = __tact_store_address(build_2, v'myJettonWalletAddress);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, slice, cell, int, int, cell, int, int, int, int, slice, slice, int, slice))) $BondingCurve$_load(slice sc_0) inline {
    var v'total_supply = sc_0~load_coins();
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    var v'mintable = sc_0~load_int(1);
    var v'max_supply = sc_0~load_coins();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'balances = sc_1~load_dict();
    var v'virtualTonReserve = sc_1~load_int(257);
    var v'virtualTokenReserve = sc_1~load_int(257);
    var v'complete = sc_1~load_int(1);
    var v'liquidityAdded = sc_1~load_int(1);
    var v'factory = sc_1~__tact_load_address();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'jettonCreator = sc_2~__tact_load_address();
    var v'tokenDebt = sc_2~load_int(257);
    var v'myJettonWalletAddress = sc_2~__tact_load_address();
    return (sc_0, (v'total_supply, v'owner, v'content, v'mintable, v'max_supply, v'balances, v'virtualTonReserve, v'virtualTokenReserve, v'complete, v'liquidityAdded, v'factory, v'jettonCreator, v'tokenDebt, v'myJettonWalletAddress));
}

(slice, ((slice, cell))) $BondingCurve$init$_load(slice sc_0) inline {
    var v'jettonCreator = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    return (sc_0, (v'jettonCreator, v'content));
}

(int, slice, cell, int, int, cell, int, int, int, int, slice, slice, int, slice) $BondingCurve$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$BondingCurve$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice $jettonCreator, cell $content) = $sc~$BondingCurve$init$_load();
        $sc.end_parse();
        return $BondingCurve$_contract_init($jettonCreator, $content);
    }
}

() $BondingCurve$_contract_store((int, slice, cell, int, int, cell, int, int, int, int, slice, slice, int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $BondingCurve$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: Factory
;;

builder $Factory$init$_store(builder build_0, (slice) v) inline {
    var (v'treasury) = v;
    build_0 = __tact_store_address(build_0, v'treasury);
    return build_0;
}

(cell, cell) $Factory$_init_child(cell sys', slice $treasury) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Factory
    cell mine = __tact_dict_get_code(source, 12068);
    contracts = __tact_dict_set_code(contracts, 12068, mine);
    
    ;; Contract Code: BondingCurve
    cell code_17275 = __tact_dict_get_code(source, 17275);
    contracts = __tact_dict_set_code(contracts, 17275, code_17275);
    
    ;; Contract Code: JettonDefaultWallet
    cell code_55471 = __tact_dict_get_code(source, 55471);
    contracts = __tact_dict_set_code(contracts, 55471, code_55471);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Factory$init$_store(b, ($treasury));
    return (mine, b.end_cell());
}